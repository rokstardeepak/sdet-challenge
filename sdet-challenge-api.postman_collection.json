{
	"info": {
		"_postman_id": "002b0cee-f252-42f2-9074-d0bbf6f3c454",
		"name": "SDET Challenge - Reckit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14855106"
	},
	"item": [
		{
			"name": "List All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response contains products array\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products).to.be.an('array');\r",
							"});\r",
							"pm.test(\"Response has pagination fields\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('total');\r",
							"    pm.expect(jsonData).to.have.property('page');\r",
							"    pm.expect(jsonData).to.have.property('limit');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Details by ID 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response contains product object\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.product || jsonData).to.be.an('object');\r",
							"});\r",
							"pm.test(\"Product has required fields\", function() {\r",
							"    const product = pm.response.json().product || pm.response.json();\r",
							"    pm.expect(product).to.have.property('id');\r",
							"    pm.expect(product).to.have.property('name');\r",
							"    pm.expect(product).to.have.property('price');\r",
							"    pm.expect(product).to.have.property('stock');\r",
							"    pm.expect(product).to.have.property('category');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Product (POST /api/products)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that the response status code is 201 Created\r",
							"pm.test(\"Status code is 200 OK or 201 Created\", function() {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Test that the response contains a product object\r",
							"pm.test(\"Response contains product object\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.product).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Test that the product has all required fields\r",
							"pm.test(\"Product has required fields\", function() {\r",
							"    const product = pm.response.json().product;\r",
							"    pm.expect(product).to.have.property('id');\r",
							"    pm.expect(product).to.have.property('name');\r",
							"    pm.expect(product).to.have.property('price');\r",
							"    pm.expect(product).to.have.property('stock');\r",
							"    pm.expect(product).to.have.property('category');\r",
							"});\r",
							"\r",
							"// Test that the response matches the request body\r",
							"pm.test(\"Response matches request body\", function() {\r",
							"    const requestBody = JSON.parse(pm.request.body.raw);\r",
							"    const product = pm.response.json().product;\r",
							"    pm.expect(product.name).to.equal(requestBody.name);\r",
							"    pm.expect(product.price).to.equal(requestBody.price);\r",
							"    pm.expect(product.stock).to.equal(requestBody.stock);\r",
							"    pm.expect(product.category).to.equal(requestBody.category);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mobile\",\r\n  \"price\": 99.99,\r\n  \"stock\": 10,\r\n  \"category\": \"Electronics\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Product (PUT /api/products/:id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response indicates success\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n  \"name\": \"Updated Product\",\r\n  \"price\": 199.99,\r\n  \"stock\": 20\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Product (DELETE /api/products/:id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204, 200, or 404\", function() {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check API Health (GET /health)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"API is healthy\", function() {\r",
							"    pm.expect(pm.response.text().trim()).to.equal(\"healthy\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://sdet-api.reckitplus.com",
			"type": "string"
		},
		{
			"key": "token",
			"value": "fb8c444540781501f636520097052785-99e075a5",
			"type": "string"
		}
	]
}